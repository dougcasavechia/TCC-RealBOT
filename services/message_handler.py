import pandas as pd
from services.client_service import buscar_cliente_por_telefone
from services.message_service import enviar_mensagem, salvar_mensagem_em_arquivo
from services.product_service import gerar_menu_inicial, filtrar_projetos_por_escolhas, gerar_menu_por_definicao
from services.state_service import atualizar_ultima_atividade
from services.materials_service import gerar_menu_materia_prima, gerar_menu_por_definicao_mp, carregar_tabela_mp, gerar_menu_por_definicao_mp
from services.formula_service import calcular_pecas
from services.global_state import global_state
from logger import logger


def gerenciar_mensagem_recebida(contato, texto):
    """
    Processa mensagens recebidas e decide o fluxo com base no estado do usu√°rio.
    """
    logger.info(f"üì© Mensagem recebida - contato: {contato}, texto: {texto}")

    # ‚úÖ Atualiza o tempo de atividade do usu√°rio
    atualizar_ultima_atividade(contato)

    # Buscar informa√ß√µes do cliente no estado global
    cliente_info = global_state.informacoes_cliente.get(contato)

    if not cliente_info:
        logger.debug(f"üîç Buscando cliente no banco para o n√∫mero: {contato}")
        cliente_info = buscar_cliente_por_telefone(contato)

        if cliente_info and isinstance(cliente_info, dict) and cliente_info.get("nome_cliente"):
            global_state.informacoes_cliente[contato] = cliente_info
        else:
            enviar_mensagem(contato, "‚ùå Seu n√∫mero n√£o est√° cadastrado. Solicite cadastro com um vendedor.")
            salvar_mensagem_em_arquivo(contato, "Desconhecido", "Bot: N√∫mero n√£o cadastrado.")
            global_state.limpar_dados_usuario(contato)
            return

    nome_cliente = cliente_info.get("nome_cliente", "Cliente").strip()

    # ‚úÖ Inicializa o estado do usu√°rio, caso ele n√£o tenha um
    if contato not in global_state.status_usuario:
        global_state.status_usuario[contato] = "inicial"

    status = global_state.status_usuario.get(contato, "inicial")

    # ‚úÖ Restaurar estado caso o usu√°rio estivesse inativo
    if status.startswith("inativo_"):
        logger.info(f"‚è≥ Retomando estado anterior para {contato}.")
        status = status.replace("inativo_", "")  # Remove o prefixo "inativo_"
        global_state.status_usuario[contato] = status

    # ‚úÖ Delegar para o fluxo correto com TODOS os estados
    if status == "inicial":
        perguntar_tipo_medida(contato, nome_cliente)
    elif status == "definindo_medida":
        processar_tipo_medida(contato, texto, nome_cliente)
    elif status == "definicao_1":
        processar_menu_dinamico_produto(contato, texto, nome_cliente, "definicao_1")
    elif status == "definicao_2":
        processar_menu_dinamico_produto(contato, texto, nome_cliente, "definicao_2")
    elif status == "definicao_3":
        processar_menu_dinamico_produto(contato, texto, nome_cliente, "definicao_3")
    elif status == "aguardando_altura":
        processar_altura(contato, texto)
    elif status == "aguardando_largura":
        processar_largura(contato, texto)
    elif status == "cor_materia_prima":
        processar_menu_dinamico_mp(contato, texto, "cor_materia_prima")
    elif status == "espessura_materia_prima":
        processar_menu_dinamico_mp(contato, texto, "espessura_materia_prima")
    elif status == "beneficiamento":
        processar_menu_dinamico_mp(contato, texto, "beneficiamento")
    elif status == "aguardando_quantidade":
        processar_quantidade(contato, texto)
    else:
        repetir_menu(contato, nome_cliente)


def perguntar_tipo_medida(contato, nome_cliente):
    """
    Pergunta ao usu√°rio se a medida √© final ou de v√£o.
    """
    logger.info(f"üü¢ Perguntando tipo de medida para {contato}.")
    
    # Criar o menu de op√ß√µes
    menu = ["Medida final", "Medida de v√£o"]
    enviar_mensagem(contato, "Qual o tipo de medida que deseja informar?")
    enviar_mensagem(contato, "\n".join([f"{i + 1}. {opcao}" for i, opcao in enumerate(menu)]))

    # Atualiza o estado e salva o menu no global_state
    global_state.status_usuario[contato] = "definindo_medida"
    global_state.ultimo_menu_usuario[contato] = menu  # Armazena o menu
    salvar_mensagem_em_arquivo(contato, nome_cliente, "Bot: Perguntou sobre tipo de medida.")


def processar_tipo_medida(contato, texto, nome_cliente):
    """
    Processa a escolha do tipo de medida (final ou v√£o) e inicia o fluxo de sele√ß√£o.
    """
    try:
        escolha = int(texto)
        if escolha not in [1, 2]:
            raise ValueError("Op√ß√£o inv√°lida.")

        medida_final = 1 if escolha == 1 else 0
        global_state.informacoes_cliente[contato]["medida_final"] = medida_final

        tipo_medida = "final" if medida_final == 1 else "de v√£o"
        logger.info(f"‚úÖ {nome_cliente} ({contato}) escolheu medida {tipo_medida}.")
        enviar_mensagem(contato, f"Voc√™ escolheu informar a medida {tipo_medida}.")
        salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Usu√°rio escolheu medida {tipo_medida}.")

        # Inicia o menu de produtos filtrado pela medida
        iniciar_conversa(contato, nome_cliente)
    except ValueError:
        logger.warning(f"‚ö†Ô∏è {contato} enviou uma op√ß√£o inv√°lida para tipo de medida.")
        enviar_mensagem(contato, "Op√ß√£o inv√°lida. Por favor, escolha entre:\n1. Medida final\n2. Medida de v√£o")


def iniciar_conversa(contato, nome_cliente):
    """
    Inicia a conversa com o usu√°rio e apresenta o menu inicial.
    """
    logger.info(f"üü¢ Iniciando conversa com {contato}.")
    enviar_mensagem(contato, "Vamos come√ßar escolhendo o tipo de produto.")

    # Obt√©m a medida selecionada
    medida_final = global_state.informacoes_cliente[contato].get("medida_final")

    # Gera o menu inicial a partir da tabela, filtrando pela medida
    opcoes = gerar_menu_inicial(medida_final=medida_final)  # Filtra pelo tipo de medida

    if opcoes:
        # Atualiza o estado e salva o menu no global_state
        global_state.status_usuario[contato] = "definicao_1"
        global_state.ultimo_menu_usuario[contato] = opcoes  # Armazenar como lista
        apresentar_menu(contato, nome_cliente, opcoes, "definicao_1")
    else:
        enviar_mensagem(contato, "‚ùå N√£o h√° op√ß√µes dispon√≠veis para a medida escolhida. Tente novamente mais tarde.")
        salvar_mensagem_em_arquivo(contato, nome_cliente, "Bot: Menu inicial vazio.")
        finalizar_conversa(contato, nome_cliente)



def processar_menu_dinamico_produto(contato, texto, nome_cliente, estado_atual):
    """
    Processa o menu din√¢mico com base no estado atual e na escolha do usu√°rio.
    Trata entradas inv√°lidas e repete o menu se necess√°rio.
    """
    try:
        escolha = int(texto) - 1  # Ajustar √≠ndice para 0-based
        opcoes = global_state.ultimo_menu_usuario.get(contato)

        # Verificar se a escolha est√° dentro do intervalo v√°lido
        if not opcoes or escolha < 0 or escolha >= len(opcoes):
            raise ValueError("Op√ß√£o inv√°lida.")

        # Capturar a escolha v√°lida
        escolha_usuario = opcoes[escolha]
        salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Op√ß√£o escolhida: {escolha_usuario}.")

        # Atualizar o estado global com a escolha
        informacoes_cliente = global_state.informacoes_cliente.setdefault(contato, {})
        informacoes_cliente[estado_atual] = escolha_usuario

        # Filtrar os projetos com base nas escolhas atuais
        chaves_relevantes = ["definicao_1", "definicao_2", "definicao_3", "medida_final"]
        dados_para_filtrar = {k: v for k, v in informacoes_cliente.items() if k in chaves_relevantes}
        projetos = filtrar_projetos_por_escolhas(**dados_para_filtrar)

        if not projetos:
            enviar_mensagem(contato, "‚ùå Nenhum projeto encontrado. Tente novamente mais tarde.")
            finalizar_conversa(contato, nome_cliente)
            return

        # Se s√≥ restar UM projeto, significa que √© a escolha final
        if len(projetos) == 1:
            projeto_escolhido = projetos[0]
            descricao_projeto = projeto_escolhido.get("descricao_projeto", "Projeto sem descri√ß√£o.")
            enviar_mensagem(contato, f"‚úÖ Projeto selecionado: {descricao_projeto}.")
            salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Projeto finalizado: {descricao_projeto}.")

            # **INICIAR O PROCESSO DE MEDI√á√ÉO**
            processar_projeto(contato, nome_cliente, projeto_escolhido)
            return

        # Identificar a pr√≥xima defini√ß√£o v√°lida
        definicoes_ordenadas = ["definicao_2", "definicao_3"]
        proxima_definicao = None

        for definicao in definicoes_ordenadas:
            if definicao not in informacoes_cliente and gerar_menu_por_definicao(pd.DataFrame(projetos), definicao):
                proxima_definicao = definicao
                break

        if proxima_definicao:
            # Gera o pr√≥ximo menu
            opcoes_proxima_definicao = gerar_menu_por_definicao(pd.DataFrame(projetos), proxima_definicao)
            if opcoes_proxima_definicao:
                apresentar_menu(contato, nome_cliente, opcoes_proxima_definicao, proxima_definicao)
                return

        # Se n√£o h√° mais defini√ß√µes a perguntar, encerrar a conversa
        finalizar_selecao(contato, nome_cliente, projetos)

    except ValueError:
        enviar_mensagem(contato, "Op√ß√£o inv√°lida. Por favor, escolha uma das op√ß√µes listadas abaixo:")
        repetir_menu(contato, nome_cliente)


def finalizar_selecao(contato, nome_cliente, projetos):
    """
    Finaliza a sele√ß√£o e informa ao usu√°rio o projeto escolhido.
    """
    if projetos:
        projeto_escolhido = projetos[0]  # Considera o primeiro projeto como escolhido
        descricao = projeto_escolhido.get("descricao_projeto", "Projeto n√£o descrito.")
        enviar_mensagem(contato, f"‚úÖ Projeto selecionado: {descricao}.")
        salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Projeto finalizado: {descricao}.")
    else:
        enviar_mensagem(contato, "‚ùå N√£o foi poss√≠vel encontrar um projeto v√°lido. Tente novamente.")
        salvar_mensagem_em_arquivo(contato, nome_cliente, "Bot: Finaliza√ß√£o sem projeto v√°lido.")

    finalizar_conversa(contato, nome_cliente)


def apresentar_menu(contato, nome_cliente, opcoes, estado):
    """
    Envia o menu ao usu√°rio e atualiza o estado no global_state.
    """
    menu = "\n".join([f"{i + 1}. {opcao}" for i, opcao in enumerate(opcoes)])
    enviar_mensagem(contato, "Escolha uma das op√ß√µes:")
    enviar_mensagem(contato, menu)

    global_state.status_usuario[contato] = estado
    global_state.ultimo_menu_usuario[contato] = opcoes
    salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Apresentou menu para {estado}.")


def processar_projeto(contato, nome_cliente, projeto):
    """
    Inicia o fluxo solicitando altura e largura do usu√°rio.
    """
    global_state.informacoes_cliente[contato]["projeto_escolhido"] = projeto
    enviar_mensagem(contato, "Informe a altura do v√£o ou da pe√ßa em mil√≠metros:")
    global_state.status_usuario[contato] = "aguardando_altura"


def processar_altura(contato, texto):
    """
    Processa a altura enviada pelo usu√°rio e salva no estado global.
    """
    try:
        altura = int(texto)
        dados_usuario = global_state.informacoes_cliente.get(contato, {})

        # **Salvando altura corretamente no estado global**
        dados_usuario["altura"] = altura
        global_state.informacoes_cliente[contato] = dados_usuario  # Atualiza o estado

        logger.debug(f"üìè Altura salva: {altura}mm para {contato}")

        enviar_mensagem(contato, "Agora informe a largura em mil√≠metros:")
        global_state.status_usuario[contato] = "aguardando_largura"

    except ValueError:
        enviar_mensagem(contato, "‚ùå Altura inv√°lida! Digite um n√∫mero inteiro.")


def processar_largura(contato, texto):
    try:
        largura = int(texto)
        dados_usuario = global_state.informacoes_cliente.get(contato, {})

        if "altura" not in dados_usuario:
            logger.error(f"‚ùå Erro: Altura n√£o encontrada para {contato}. Estado atual: {dados_usuario}")
            enviar_mensagem(contato, "‚ùå Erro ao recuperar a altura. Informe novamente.")
            return

        dados_usuario["largura"] = largura
        global_state.informacoes_cliente[contato] = dados_usuario  # Atualiza o estado

        logger.debug(f"üìè Largura salva: {largura}mm para {contato}")

        # üìå **Novo fluxo: Inicia menu de mat√©ria-prima**
        opcoes_mp = gerar_menu_materia_prima()
        if opcoes_mp:
            apresentar_menu_mp(contato, opcoes_mp, "cor_materia_prima")
        else:
            enviar_mensagem(contato, "‚ùå Nenhuma mat√©ria-prima dispon√≠vel. Tente novamente mais tarde.")
            return

    except ValueError:
        enviar_mensagem(contato, "‚ùå Largura inv√°lida! Digite um n√∫mero inteiro.")


def validar_pecas_calculadas(pecas):
    """
    Valida se a lista de pe√ßas est√° no formato correto.
    Retorna uma lista de pe√ßas v√°lidas ou None em caso de erro.
    """
    if not isinstance(pecas, list):
        logger.error(f"‚ùå Erro: 'pecas' deveria ser uma lista, mas √© {type(pecas)}")
        return None

    pecas_validas = []

    for peca in pecas:
        if not isinstance(peca, dict):
            logger.error(f"‚ùå Tipo inesperado em 'peca': {type(peca)} - Valor: {peca}")
            continue  # Ignora itens inv√°lidos

        if "nome_peca" not in peca or "quantidade" not in peca or "dimensoes" not in peca:
            logger.error(f"‚ùå Pe√ßa inv√°lida: {peca}")
            continue

        pecas_validas.append(peca)

    return pecas_validas if pecas_validas else None

def apresentar_menu_mp(contato, opcoes, estado):
    """
    Envia o menu de mat√©ria-prima ao usu√°rio e atualiza o estado no global_state.
    """
    menu = "\n".join([f"{i + 1}. {opcao}" for i, opcao in enumerate(opcoes)])
    enviar_mensagem(contato, "Escolha uma das op√ß√µes:")
    enviar_mensagem(contato, menu)

    # Atualizar o estado do usu√°rio e salvar o menu atual
    global_state.status_usuario[contato] = estado
    global_state.ultimo_menu_usuario[contato] = opcoes
    salvar_mensagem_em_arquivo(contato, "Bot", f"Bot: Apresentou menu para o estado '{estado}'.")


def processar_menu_dinamico_mp(contato, texto, estado_atual):
    """
    Processa a escolha do usu√°rio no menu din√¢mico de mat√©ria-prima.
    """
    try:
        escolha = int(texto) - 1  # Ajustar √≠ndice para 0-based
        opcoes = global_state.ultimo_menu_usuario.get(contato)

        # Verificar se a escolha √© v√°lida
        if not opcoes or escolha < 0 or escolha >= len(opcoes):
            raise ValueError("Op√ß√£o inv√°lida.")

        # Registrar a escolha feita pelo usu√°rio
        escolha_usuario = opcoes[escolha]
        salvar_mensagem_em_arquivo(contato, "Bot", f"Bot: Usu√°rio escolheu: {escolha_usuario}.")
        informacoes_cliente = global_state.informacoes_cliente.setdefault(contato, {})
        informacoes_cliente[estado_atual] = escolha_usuario

        # Carregar a tabela de mat√©ria-prima e aplicar filtros dinamicamente
        df_mp = carregar_tabela_mp()

        # Mapeamento das colunas reais no DataFrame
        colunas_reais = {
            "cor_materia_prima": "cor_materia_prima",
            "espessura_materia_prima": "espessura_materia_prima",
            "beneficiamento": "beneficiamento",
        }

        # Aplicar filtros com base nas escolhas feitas
        for chave_estado, coluna_real in colunas_reais.items():
            valor = informacoes_cliente.get(chave_estado)
            if valor:
                df_mp = df_mp[df_mp[coluna_real] == valor]

        # Determinar a pr√≥xima defini√ß√£o a ser exibida
        definicoes_ordenadas = ["espessura_materia_prima", "beneficiamento"]
        proxima_definicao = None
        for definicao in definicoes_ordenadas:
            # Verifica se j√° processou essa defini√ß√£o ou se h√° op√ß√µes dispon√≠veis
            if definicao not in informacoes_cliente:
                opcoes_proxima_definicao = gerar_menu_por_definicao_mp(df_mp, colunas_reais[definicao])
                if opcoes_proxima_definicao:  # Gera o pr√≥ximo menu somente se houver op√ß√µes v√°lidas
                    proxima_definicao = definicao
                    break

        if proxima_definicao:
            # Gerar e apresentar o menu para a pr√≥xima defini√ß√£o
            apresentar_menu_mp(contato, opcoes_proxima_definicao, proxima_definicao)
            global_state.status_usuario[contato] = proxima_definicao
        else:
            # Se n√£o houver mais defini√ß√µes, finalizar a sele√ß√£o
            finalizar_selecao_mp(contato, informacoes_cliente)

    except ValueError:
        # Repetir o menu caso o valor seja inv√°lido
        enviar_mensagem(contato, "Op√ß√£o inv√°lida. Por favor, escolha uma das op√ß√µes listadas abaixo:")
        repetir_menu(contato, "Bot")

def finalizar_selecao_mp(contato, informacoes_cliente):
    """
    Finaliza a sele√ß√£o de mat√©ria-prima e continua para a pr√≥xima etapa.
    """
    materia_prima = informacoes_cliente.get("cor_materia_prima", "Mat√©ria-prima n√£o definida")
    espessura = informacoes_cliente.get("espessura_materia_prima", "Espessura n√£o definida")
    beneficiamento = informacoes_cliente.get("beneficiamento", "Beneficiamento n√£o definido")
    altura = informacoes_cliente.get("altura")
    largura = informacoes_cliente.get("largura")

    if not altura or not largura:
        enviar_mensagem(contato, "‚ùå Erro interno: Altura ou largura n√£o definida. Reinicie o processo.")
        return

    # Obter a f√≥rmula do projeto escolhido
    projeto = informacoes_cliente.get("projeto_escolhido", {})
    id_formula = projeto.get("id_formula")

    if not id_formula:
        enviar_mensagem(contato, "‚ùå Erro interno: F√≥rmula do projeto n√£o encontrada. Reinicie o processo.")
        return

    # **Usar calcular_pecas do formula_service.py**
    pecas = calcular_pecas(id_formula, altura, largura)

    if not pecas:
        enviar_mensagem(contato, "‚ùå Erro ao calcular as pe√ßas. Tente novamente.")
        return

    # **Salvar as pe√ßas calculadas**
    informacoes_cliente["pecas"] = pecas
    global_state.informacoes_cliente[contato] = informacoes_cliente

    # Exibir o resumo da sele√ß√£o
    enviar_mensagem(
        contato,
        f"‚úÖ Mat√©ria-prima escolhida: {materia_prima}, {espessura}, {beneficiamento}."
    )

    # Exibir as pe√ßas calculadas
    msg_pecas = "üìè Pe√ßas calculadas:\n"
    for peca in pecas:
        msg_pecas += f"{peca['quantidade']}x {peca['nome_peca']}: {peca['dimensoes'][0]}mm x {peca['dimensoes'][1]}mm\n"

    enviar_mensagem(contato, msg_pecas)

    # Pedir a quantidade ao usu√°rio
    enviar_mensagem(contato, "Quantas unidades desse projeto voc√™ deseja?")
    global_state.status_usuario[contato] = "aguardando_quantidade"



def processar_quantidade(contato, texto):
    """
    Processa a quantidade informada e exibe as dimens√µes corretas para medida final ou medida de v√£o.
    """
    try:
        quantidade = int(texto)
        dados_usuario = global_state.informacoes_cliente[contato]
        projeto = dados_usuario["projeto_escolhido"]
        descricao_projeto = projeto.get("descricao_projeto", "Projeto sem descri√ß√£o.")
        id_formula = projeto.get("id_formula", 0)
        medida_final = dados_usuario.get("medida_final")  # Se for 1, significa que o usu√°rio escolheu medida final

        logger.debug(f"üìä ID F√≥rmula: {id_formula}, Medida Final: {medida_final}, Quantidade: {quantidade}")
        
        # Se for medida final, usamos os valores informados diretamente
        if medida_final and id_formula == 1:
            altura = dados_usuario["altura"]
            largura = dados_usuario["largura"]

            msg_final = f"üì¶ Voc√™ solicitou {quantidade} unidades do item {descricao_projeto} de {altura}mm x {largura}mm."
        
        else:
            # Se for medida de v√£o, aplicamos as f√≥rmulas para calcular as pe√ßas
            pecas = dados_usuario.get("pecas", [])

            logger.debug(f"üìå Conte√∫do de 'pecas' antes da multiplica√ß√£o: {pecas}")

            if not isinstance(pecas, list) or len(pecas) == 0:
                logger.error("‚ùå Erro: 'pecas' est√° vazio ou n√£o √© uma lista v√°lida.")
                enviar_mensagem(contato, "‚ùå Erro interno ao calcular as pe√ßas. Tente novamente.")
                return

            pecas_multiplicadas = []

            for peca in pecas:
                if not isinstance(peca, dict):
                    logger.error(f"‚ùå Tipo inesperado em 'peca': {type(peca)} - Valor: {peca}")
                    continue  # Ignora valores inv√°lidos

                pecas_multiplicadas.append({
                    "nome_peca": peca.get("nome_peca", "Pe√ßa"),
                    "quantidade": peca.get("quantidade", 1) * quantidade,
                    "dimensoes": peca.get("dimensoes", (0, 0))
                })

            logger.debug(f"üìå Pecas multiplicadas: {pecas_multiplicadas}")

            msg_final = f"üì¶ Para {quantidade} unidades do item {descricao_projeto}, voc√™ precisar√° de:\n"
            for peca in pecas_multiplicadas:
                msg_final += f"{peca['quantidade']}x {peca['nome_peca']}: {peca['dimensoes'][0]}mm x {peca['dimensoes'][1]}mm\n"

        enviar_mensagem(contato, msg_final)
        salvar_mensagem_em_arquivo(contato, descricao_projeto, msg_final)
        finalizar_conversa(contato, "Pedido finalizado.")

    except ValueError:
        enviar_mensagem(contato, "‚ùå Quantidade inv√°lida! Digite um n√∫mero inteiro.")


def repetir_menu(contato, nome_cliente):
    """
    Reenvia o menu apropriado com base no estado atual do usu√°rio.
    """
    status = global_state.status_usuario.get(contato)
    ultimo_menu = global_state.ultimo_menu_usuario.get(contato)

    if ultimo_menu:
        enviar_mensagem(contato, "Por favor, escolha uma das op√ß√µes listadas abaixo:")
        enviar_mensagem(contato, "\n".join([f"{i + 1}. {opcao}" for i, opcao in enumerate(ultimo_menu)]))
        salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Repetiu o menu para o estado '{status}'.")
    else:
        enviar_mensagem(contato, "Conversa encerrada por inatividade. Para reiniciar, envie qualquer mensagem.")
        salvar_mensagem_em_arquivo(contato, nome_cliente, "Bot: Conversa encerrada por inatividade.")
        global_state.limpar_dados_usuario(contato)


def finalizar_conversa(contato, nome_cliente):
    """
    Finaliza a conversa e limpa os dados do usu√°rio do estado global.
    """
    enviar_mensagem(contato, "Obrigado! Caso precise de algo, estamos √† disposi√ß√£o! üòä")
    salvar_mensagem_em_arquivo(contato, nome_cliente, "Bot: Conversa encerrada.")
    global_state.limpar_dados_usuario(contato)
    