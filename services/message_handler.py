import pandas as pd
import os
from logger import logger
from services.client_service import ClienteCache
from services.message_service import enviar_mensagem, salvar_mensagem_em_arquivo
from services.product_service import gerar_menu_inicial, filtrar_projetos_por_escolhas, gerar_menu_por_definicao, carregar_tabela_projetos
from services.state_service import atualizar_ultima_atividade
from services.materials_service import gerar_menu_materia_prima, buscar_materia_prima, carregar_tabela_mp
# from services.materials_service import filtrar_mp_por_escolhas
from services.formula_service import calcular_pecas
from services.pedidos_service import calcular_valores_pecas, obter_nome_projeto, obter_nome_materia_prima, salvar_pedido, atualizar_status_pedido, visualizar_orcamentos
from services.global_state import global_state
from config import OUTPUT_DIR

df_clientes = ClienteCache.carregar_clientes()
df_projetos = carregar_tabela_projetos()
df_mp = carregar_tabela_mp()

PEDIDOS_FILE_PATH = os.path.join(OUTPUT_DIR, "pedidos.xlsx")

def gerenciar_mensagem_recebida(contato, texto):
    """
    Processa mensagens recebidas e decide o fluxo com base no estado do usu√°rio.
    """
    logger.info(f"üì© Mensagem recebida - contato: {contato}, texto: {texto}")

    # ‚úÖ Verificar se o n√∫mero est√° cadastrado
    cliente_info = ClienteCache.buscar_cliente_por_telefone(contato)
    
    if not cliente_info:
        logger.warning(f"‚ùå N√∫mero {contato} n√£o cadastrado. Encerrando fluxo.")
        enviar_mensagem(contato, "‚ö†Ô∏è Ol√°! Para continuar, √© necess√°rio realizar o cadastro. Procure um vendedor para se cadastrar. üìû")
        return  # Encerra o fluxo imediatamente

    nome_cliente = cliente_info["nome_cliente"]  # Obtendo nome do cliente
    atualizar_ultima_atividade(contato)

    # ‚úÖ Restaurar estado caso o usu√°rio estivesse inativo
    status = global_state.status_usuario.get(contato, "inicial")
    if status.startswith("inativo_") or status.startswith("aviso_enviado_"):
        logger.info(f"‚è≥ Retomando estado anterior para {contato}. Estado original: {status}")
        status = status.replace("inativo_", "").replace("aviso_enviado_", "")
        global_state.status_usuario[contato] = status  

    # ‚úÖ Se o usu√°rio estiver no estado "inicial", exibe o menu inicial
    if status == "inicial":
        mostrar_menu_inicial(contato, nome_cliente)
    elif status == "menu_inicial":
        processar_menu_inicial(contato, texto, nome_cliente)
    elif status == "aguardando_confirmacao_pedido":
        processar_confirmacao_pedido(contato, texto)
    elif status == "definindo_medida":
        processar_tipo_medida(contato, texto, nome_cliente)
    elif status == "definicao_1":
        processar_menu_dinamico_produto(contato, texto, nome_cliente, "definicao_1")
    elif status == "definicao_2":
        processar_menu_dinamico_produto(contato, texto, nome_cliente, "definicao_2")
    elif status == "definicao_3":
        processar_menu_dinamico_produto(contato, texto, nome_cliente, "definicao_3")
    elif status == "definicao_4":
        processar_menu_dinamico_produto(contato, texto, nome_cliente, "definicao_4")
    elif status == "aguardando_altura":
        processar_altura(contato, texto)
    elif status == "aguardando_largura":
        processar_largura(contato, texto)
    elif status == "cor_materia_prima":
        processar_menu_dinamico_mp(contato, texto, "cor_materia_prima")
    elif status == "espessura_materia_prima":
        processar_menu_dinamico_mp(contato, texto, "espessura_materia_prima")
    elif status == "beneficiamento":
        processar_menu_dinamico_mp(contato, texto, "beneficiamento")
    elif status == "aguardando_quantidade":
        processar_quantidade(contato, texto)
    elif status == "aguardando_resposta_adicionar":
        processar_resposta_adicionar_pecas(contato, texto)
    elif status == "aguardando_nome_pedido":  
        processar_resposta_finalizou(contato, texto)
    elif status == "aguardando_autorizacao":
        processar_resposta_autorizacao(contato, texto)
    elif status == "escolhendo_orcamento":
        processar_escolha_orcamento(contato, texto)
    elif status == "gerenciando_orcamento":
        processar_resposta_autorizacao(contato, texto)  # Reutilizando a mesma l√≥gica
    else:
        repetir_menu(contato, nome_cliente)


def mostrar_menu_inicial(contato, nome_cliente):
    """
    Apresenta o menu inicial para o usu√°rio escolher entre fazer um or√ßamento ou visualizar or√ßamentos existentes.
    """
    menu = ["Fazer or√ßamento", "Visualizar or√ßamentos"]
    enviar_mensagem(contato, f"Ol√° {nome_cliente}, o que deseja?")
    enviar_mensagem(contato, "\n".join([f"{i + 1}. {opcao}" for i, opcao in enumerate(menu)]))

    global_state.status_usuario[contato] = "menu_inicial"
    global_state.ultimo_menu_usuario[contato] = menu


def perguntar_tipo_medida(contato, nome_cliente):
    """
    Pergunta ao usu√°rio se a medida √© final ou de v√£o.
    """
    logger.info(f"üü¢ Perguntando tipo de medida para {contato}.")
    
    # Criar o menu de op√ß√µes
    menu = ["Medida final", "Medida de v√£o"]
    enviar_mensagem(contato, "Qual o tipo de medida que deseja informar?")
    enviar_mensagem(contato, "\n".join([f"{i + 1}. {opcao}" for i, opcao in enumerate(menu)]))

    # Atualiza o estado e salva o menu no global_state
    global_state.status_usuario[contato] = "definindo_medida"
    global_state.ultimo_menu_usuario[contato] = menu  # Armazena o menu
    salvar_mensagem_em_arquivo(contato, nome_cliente, "Bot: Perguntou sobre tipo de medida.")


def processar_tipo_medida(contato, texto, nome_cliente):
    """
    Processa a escolha do tipo de medida (final ou v√£o) e inicia o fluxo de sele√ß√£o.
    """
    try:
        escolha = int(texto)
        if escolha not in [1, 2]:
            raise ValueError("Op√ß√£o inv√°lida.")

        medida_final = 1 if escolha == 1 else 0
        global_state.informacoes_cliente[contato]["medida_final"] = medida_final

        tipo_medida = "final" if medida_final == 1 else "de v√£o"
        logger.info(f"‚úÖ {nome_cliente} ({contato}) escolheu medida {tipo_medida}.")
        enviar_mensagem(contato, f"Voc√™ escolheu informar a medida {tipo_medida}.")
        salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Usu√°rio escolheu medida {tipo_medida}.")

        # Inicia o menu de produtos filtrado pela medida
        iniciar_conversa(contato, nome_cliente)
    except ValueError:
        logger.warning(f"‚ö†Ô∏è {contato} enviou uma op√ß√£o inv√°lida para tipo de medida.")
        enviar_mensagem(contato, "Op√ß√£o inv√°lida. Por favor, escolha entre:\n1. Medida final\n2. Medida de v√£o")


def iniciar_conversa(contato, nome_cliente):
    """
    Inicia a conversa com o usu√°rio e apresenta o menu inicial.
    """
    logger.info(f"üü¢ Iniciando conversa com {contato}.")
    enviar_mensagem(contato, "Vamos come√ßar escolhendo o tipo de produto.")

    # Obt√©m a medida selecionada
    medida_final = global_state.informacoes_cliente[contato].get("medida_final")

    # Gera o menu inicial a partir da tabela, filtrando pela medida
    opcoes = gerar_menu_inicial(medida_final=medida_final)  # Filtra pelo tipo de medida

    if opcoes:
        # Atualiza o estado e salva o menu no global_state
        global_state.status_usuario[contato] = "definicao_1"
        global_state.ultimo_menu_usuario[contato] = opcoes  # Armazenar como lista
        apresentar_menu(contato, nome_cliente, opcoes, "definicao_1")
    else:
        enviar_mensagem(contato, "‚ùå N√£o h√° op√ß√µes dispon√≠veis para a medida escolhida. Tente novamente mais tarde.")
        salvar_mensagem_em_arquivo(contato, nome_cliente, "Bot: Menu inicial vazio.")
        finalizar_conversa(contato, nome_cliente)

def processar_menu_inicial(contato, texto, nome_cliente):
    """
    Processa a escolha do usu√°rio no menu inicial.
    """
    try:
        escolha = int(texto)
        if escolha == 1:
            # Usu√°rio quer fazer um or√ßamento (segue fluxo normal)
            perguntar_tipo_medida(contato, nome_cliente)
        elif escolha == 2:
            # Usu√°rio quer visualizar or√ßamentos
            visualizar_orcamentos(contato, nome_cliente)
        else:
            raise ValueError("Op√ß√£o inv√°lida.")
    except ValueError:
        enviar_mensagem(contato, "‚ùå Op√ß√£o inv√°lida. Escolha entre:\n1Ô∏è‚É£ Fazer or√ßamento\n2Ô∏è‚É£ Visualizar or√ßamentos")


def processar_escolha_orcamento(contato, texto):
    """
    Exibe o resumo do or√ßamento escolhido antes de oferecer as op√ß√µes de autorizar produ√ß√£o, manter or√ßamento ou cancelar.
    """
    try:
        opcoes = global_state.ultimo_menu_usuario.get(contato, [])
        escolha = int(texto) - 1

        if escolha < 0 or escolha >= len(opcoes):
            raise ValueError("Op√ß√£o inv√°lida.")

        id_pedido, nome_pedido = opcoes[escolha]

        # üîπ Carregar todas as pe√ßas do pedido selecionado
        df_pedidos = pd.read_excel(PEDIDOS_FILE_PATH)
        df_pedido = df_pedidos[df_pedidos["id_pedido"] == id_pedido]

        if df_pedido.empty:
            enviar_mensagem(contato, "‚ùå Erro ao carregar o pedido. Tente novamente.")
            return

        # üîπ Construir resumo do pedido
        resumo_pedido = f"üìù *Resumo do Pedido: {nome_pedido}*\n"
        total_geral = 0
        total_m2 = 0
        total_pecas = 0

        for _, peca in df_pedido.iterrows():
            resumo_pedido += f"*‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚óÑ‚óÑ‚óÑ‚óÑ‚óÑ‚óÑ‚óÑ‚óÑ‚óÑ*\n"
            resumo_pedido += f"üìå *Projeto:* {peca['descricao_projeto']}\n"
            resumo_pedido += f"üîπ *Mat√©ria-prima:* {peca['descricao_materia_prima']}\n"
            resumo_pedido += f"üí∞ *Valor por m¬≤:* R${peca['valor_mp_m2']:.2f}\n"
            resumo_pedido += f"üè¢ *Quantidade de Projetos:* {df_pedido['id_pedido'].nunique()}\n\n"
            resumo_pedido += f"üî∏ {peca['quantidade']}x {peca['descricao_peca']} - {peca['altura_peca']}mm x {peca['largura_peca']}mm\n"
            resumo_pedido += f"üìè √Årea: {peca['area_m2']}m¬≤ | üí∞ Valor: R${peca['valor_total']:.2f}\n"
            total_m2 += peca["area_m2"]
            total_pecas += peca["quantidade"]
            total_geral += peca["valor_total"]

        resumo_pedido += f"*=========================*\n"
        resumo_pedido += f"üìè *√Årea total:* {total_m2:.2f}m¬≤\n"
        resumo_pedido += f"üè¢ *Quantidade total de pe√ßas:* {total_pecas}\n"
        resumo_pedido += f"üí∞ *Valor total do pedido:* R${total_geral:.2f}\n"
        resumo_pedido += f"*=========================*\n"

        enviar_mensagem(contato, resumo_pedido)

        # üîπ Perguntar se deseja autorizar produ√ß√£o, manter or√ßamento ou cancelar
        enviar_mensagem(contato, "üìå O que deseja fazer com esse or√ßamento?")
        enviar_mensagem(contato, "1Ô∏è‚É£ Sim, autorizar produ√ß√£o\n2Ô∏è‚É£ N√£o, manter como or√ßamento\n3Ô∏è‚É£ Cancelar pedido")

        global_state.status_usuario[contato] = "gerenciando_orcamento"
        global_state.informacoes_cliente[contato]["id_pedido"] = id_pedido
        global_state.informacoes_cliente[contato]["nome_pedido"] = nome_pedido

    except (ValueError, IndexError):
        enviar_mensagem(contato, "‚ùå Op√ß√£o inv√°lida. Escolha um n√∫mero da lista.")


def processar_menu_dinamico_produto(contato, texto, nome_cliente, estado_atual):
    """
    Processa o menu din√¢mico com base no estado atual e na escolha do usu√°rio.
    """
    try:
        escolha = int(texto) - 1  # Ajustar √≠ndice para 0-based
        opcoes = global_state.ultimo_menu_usuario.get(contato)

        # Verificar se a escolha est√° dentro do intervalo v√°lido
        if not opcoes or escolha < 0 or escolha >= len(opcoes):
            raise ValueError("Op√ß√£o inv√°lida.")

        # Capturar a escolha v√°lida
        escolha_usuario = opcoes[escolha]
        salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Op√ß√£o escolhida: {escolha_usuario}.")

        # Atualizar o estado global com a escolha
        informacoes_cliente = global_state.informacoes_cliente.setdefault(contato, {})
        informacoes_cliente[estado_atual] = escolha_usuario

        # Filtrar os projetos com base nas escolhas atuais
        chaves_relevantes = ["definicao_1", "definicao_2", "definicao_3", "definicao_4", "medida_final"]
        dados_para_filtrar = {k: v for k, v in informacoes_cliente.items() if k in chaves_relevantes}
        projetos = filtrar_projetos_por_escolhas(**dados_para_filtrar)

        if not projetos:
            enviar_mensagem(contato, "‚ùå Nenhum projeto encontrado. Tente novamente mais tarde.")
            finalizar_conversa(contato, nome_cliente)
            return

        # Se s√≥ restar UM projeto, significa que √© a escolha final
        if len(projetos) == 1:
            projeto_escolhido = projetos[0]
            descricao_projeto = projeto_escolhido.get("descricao_projeto", "Projeto sem descri√ß√£o.")
            enviar_mensagem(contato, f"‚úÖ Projeto selecionado: {descricao_projeto}.")
            salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Projeto finalizado: {descricao_projeto}.")

            # **INICIAR O PROCESSO DE MEDI√á√ÉO**
            processar_projeto(contato, nome_cliente, projeto_escolhido)
            return

        # **üîπ Adicionando `definicao_4` na lista de verifica√ß√µes**
        definicoes_ordenadas = ["definicao_2", "definicao_3", "definicao_4"]
        proxima_definicao = None

        for definicao in definicoes_ordenadas:
            if definicao not in informacoes_cliente:
                # Passar o DataFrame e os filtros corretamente
                opcoes_proxima_definicao = gerar_menu_por_definicao(pd.DataFrame(projetos), definicao, dados_para_filtrar)
                if opcoes_proxima_definicao:
                    proxima_definicao = definicao
                    break

        if proxima_definicao:
            # Gera o pr√≥ximo menu
            apresentar_menu(contato, nome_cliente, opcoes_proxima_definicao, proxima_definicao)
            return

        # Se n√£o h√° mais defini√ß√µes a perguntar, encerrar a conversa
        finalizar_selecao(contato, nome_cliente, projetos)

    except ValueError:
        enviar_mensagem(contato, "Op√ß√£o inv√°lida. Por favor, escolha uma das op√ß√µes listadas abaixo:")
        repetir_menu(contato, nome_cliente)


def finalizar_selecao(contato, nome_cliente, projetos):
    """
    Finaliza a sele√ß√£o e informa ao usu√°rio o projeto escolhido.
    Se houver mais de um projeto ainda dispon√≠vel, apresentar um menu final para sele√ß√£o.
    """
    if not projetos:
        enviar_mensagem(contato, "‚ùå N√£o foi poss√≠vel encontrar um projeto v√°lido. Tente novamente.")
        salvar_mensagem_em_arquivo(contato, nome_cliente, "Bot: Finaliza√ß√£o sem projeto v√°lido.")
        finalizar_conversa(contato, nome_cliente)
        return

    if len(projetos) == 1:
        # ‚úÖ Apenas um projeto dispon√≠vel ‚Üí Selecionar automaticamente
        projeto_escolhido = projetos[0]
        descricao = projeto_escolhido.get("descricao_projeto", "Projeto n√£o descrito.")

        enviar_mensagem(contato, f"‚úÖ Projeto selecionado automaticamente: {descricao}.")
        salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Projeto finalizado automaticamente: {descricao}.")

        processar_projeto(contato, nome_cliente, projeto_escolhido)
    else:
        # ‚úÖ Mais de um projeto dispon√≠vel ‚Üí Perguntar ao usu√°rio qual deseja
        opcoes_projetos = [p["descricao_projeto"] for p in projetos]
        apresentar_menu(contato, nome_cliente, opcoes_projetos, "escolha_final_projeto")


def apresentar_menu(contato, nome_cliente, opcoes, estado):
    """
    Envia o menu ao usu√°rio e atualiza o estado no global_state.
    """
    menu = "\n".join([f"{i + 1}. {opcao}" for i, opcao in enumerate(opcoes)])
    enviar_mensagem(contato, "Escolha uma das op√ß√µes:")
    enviar_mensagem(contato, menu)

    global_state.status_usuario[contato] = estado
    global_state.ultimo_menu_usuario[contato] = opcoes
    salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Apresentou menu para {estado}.")


def processar_projeto(contato, nome_cliente, projeto):
    """
    Define altura e largura automaticamente para pe√ßas padr√£o.
    Se for um projeto que requer entrada do usu√°rio, pergunta normalmente.
    """
    global_state.informacoes_cliente[contato]["projeto_escolhido"] = projeto

    descricao_projeto = projeto.get("descricao_projeto", "").lower()
    
    # Definir altura automaticamente apenas para PE√áAS PADR√ÉO
    if "box padr√£o" in descricao_projeto:
        altura = 1845 if "fixo" in descricao_projeto else 1880
    elif "janela padr√£o" in descricao_projeto:
        altura = 938 if "fixo" in descricao_projeto else 975
    else:
        altura = None  # Outros tipos de projetos N√ÉO t√™m altura autom√°tica

    # Definir largura autom√°tica apenas se for PE√áA PADR√ÉO
    largura = None
    if "box padr√£o" in descricao_projeto or "janela padr√£o" in descricao_projeto:
        largura_opcao = global_state.informacoes_cliente[contato].get("definicao_3")  # A largura vem dessa defini√ß√£o
        if largura_opcao and isinstance(largura_opcao, str):
            numeros_encontrados = [int(s) for s in largura_opcao.split() if s.isdigit()]
            if numeros_encontrados:
                largura = numeros_encontrados[0]  # Pegamos o primeiro n√∫mero encontrado

    if altura is not None and largura is not None:
        global_state.informacoes_cliente[contato]["altura"] = altura
        global_state.informacoes_cliente[contato]["largura"] = largura

        enviar_mensagem(contato, f"‚úÖ Medidas definidas automaticamente:\nüìè Altura: {altura} mm\nüìê Largura: {largura} mm")

        # Segue direto para a sele√ß√£o de mat√©ria-prima
        opcoes_mp = gerar_menu_materia_prima()
        if opcoes_mp:
            apresentar_menu_mp(contato, opcoes_mp, "cor_materia_prima")
        else:
            enviar_mensagem(contato, "‚ùå Nenhuma mat√©ria-prima dispon√≠vel. Tente novamente mais tarde.")
    else:
        # üöÄ Se for um projeto que exige entrada de medidas, perguntar normalmente
        enviar_mensagem(contato, "Informe a altura do v√£o ou da pe√ßa em mil√≠metros:")
        global_state.status_usuario[contato] = "aguardando_altura"


def processar_altura(contato, texto):
    """
    Processa a altura enviada pelo usu√°rio e salva no estado global.
    """
    try:
        altura = int(texto)
        dados_usuario = global_state.informacoes_cliente.get(contato, {})

        # **Salvando altura corretamente no estado global**
        dados_usuario["altura"] = altura
        global_state.informacoes_cliente[contato] = dados_usuario  # Atualiza o estado

        logger.debug(f"üìè Altura salva: {altura}mm para {contato}")

        enviar_mensagem(contato, "Agora informe a largura em mil√≠metros:")
        global_state.status_usuario[contato] = "aguardando_largura"

    except ValueError:
        enviar_mensagem(contato, "‚ùå Altura inv√°lida! Digite um n√∫mero inteiro.")


def processar_largura(contato, texto):
    try:
        largura = int(texto)
        dados_usuario = global_state.informacoes_cliente.get(contato, {})

        if "altura" not in dados_usuario:
            logger.error(f"‚ùå Erro: Altura n√£o encontrada para {contato}. Estado atual: {dados_usuario}")
            enviar_mensagem(contato, "‚ùå Erro ao recuperar a altura. Informe novamente.")
            return

        dados_usuario["largura"] = largura
        global_state.informacoes_cliente[contato] = dados_usuario  # Atualiza o estado

        logger.debug(f"üìè Largura salva: {largura}mm para {contato}")

        # üìå **Novo fluxo: Inicia menu de mat√©ria-prima**
        opcoes_mp = gerar_menu_materia_prima()
        if opcoes_mp:
            apresentar_menu_mp(contato, opcoes_mp, "cor_materia_prima")
        else:
            enviar_mensagem(contato, "‚ùå Nenhuma mat√©ria-prima dispon√≠vel. Tente novamente mais tarde.")
            return

    except ValueError:
        enviar_mensagem(contato, "‚ùå Largura inv√°lida! Digite um n√∫mero inteiro.")


def validar_pecas_calculadas(pecas):
    """
    Valida se a lista de pe√ßas est√° no formato correto.
    Retorna uma lista de pe√ßas v√°lidas ou None em caso de erro.
    """
    if not isinstance(pecas, list):
        logger.error(f"‚ùå Erro: 'pecas' deveria ser uma lista, mas √© {type(pecas)}")
        return None

    pecas_validas = []

    for peca in pecas:
        if not isinstance(peca, dict):
            logger.error(f"‚ùå Tipo inesperado em 'peca': {type(peca)} - Valor: {peca}")
            continue  # Ignora itens inv√°lidos

        if "nome_peca" not in peca or "quantidade" not in peca or "dimensoes" not in peca:
            logger.error(f"‚ùå Pe√ßa inv√°lida: {peca}")
            continue

        pecas_validas.append(peca)

    return pecas_validas if pecas_validas else None

def apresentar_menu_mp(contato, opcoes, estado):
    """
    Envia o menu de mat√©ria-prima ao usu√°rio e atualiza o estado no global_state.
    """
    menu = "\n".join([f"{i + 1}. {opcao}" for i, opcao in enumerate(opcoes)])
    enviar_mensagem(contato, "Escolha uma das op√ß√µes:")
    enviar_mensagem(contato, menu)

    # Atualizar o estado do usu√°rio e salvar o menu atual
    global_state.status_usuario[contato] = estado
    global_state.ultimo_menu_usuario[contato] = opcoes
    salvar_mensagem_em_arquivo(contato, "Bot", f"Bot: Apresentou menu para o estado '{estado}'.")


def processar_menu_dinamico_mp(contato, texto, estado_atual):
    """
    Processa a escolha do usu√°rio no menu din√¢mico de mat√©ria-prima.
    - Se for "Pe√ßa Padr√£o", define automaticamente espessura 08 mm e beneficiamento TEMPERADO.
    - Se for "Fixo", "Janela" ou qualquer outro projeto que precise de espessura, primeiro pergunta a espessura.
    - Se n√£o for "Padr√£o" nem "Fixo", define beneficiamento TEMPERADO e avan√ßa.
    """
    try:
        escolha = int(texto) - 1  
        opcoes = global_state.ultimo_menu_usuario.get(contato)

        if not opcoes or escolha < 0 or escolha >= len(opcoes):
            raise ValueError("Op√ß√£o inv√°lida.")

        escolha_usuario = opcoes[escolha]
        salvar_mensagem_em_arquivo(contato, "Bot", f"Bot: Usu√°rio escolheu: {escolha_usuario}.")
        informacoes_cliente = global_state.informacoes_cliente.setdefault(contato, {})
        informacoes_cliente[estado_atual] = escolha_usuario

        cor_mp = informacoes_cliente.get("cor_materia_prima")

        # üîπ Verifica o tipo do projeto escolhido
        projeto = informacoes_cliente.get("projeto_escolhido", {})
        definicao_1 = projeto.get("definicao_1", "").strip().lower()

        # ‚úÖ Se for "Pe√ßa Padr√£o", definir automaticamente espessura e beneficiamento
        if "padr√£o" in definicao_1:
            informacoes_cliente["espessura_materia_prima"] = "08 mm"
            informacoes_cliente["beneficiamento"] = "TEMPERADO"
            logger.info(f"‚öôÔ∏è Pe√ßa Padr√£o detectada. Espessura: {informacoes_cliente['espessura_materia_prima']}, Beneficiamento: {informacoes_cliente['beneficiamento']}.")

            finalizar_selecao_mp(contato, informacoes_cliente)
            return

        # ‚úÖ Para "Fixo", "Janela" ou outros projetos, primeiro perguntar a espessura
        df_mp = carregar_tabela_mp()
        df_mp["espessura_materia_prima"] = df_mp["espessura_materia_prima"].str.strip()

        opcoes_espessura = (
            df_mp[df_mp["cor_materia_prima"].str.strip() == cor_mp]["espessura_materia_prima"]
            .dropna()
            .unique()
            .tolist()
        )

        logger.debug(f"üìè Op√ß√µes de espessura para {cor_mp}: {opcoes_espessura}")

        if estado_atual == "cor_materia_prima" and opcoes_espessura:
            apresentar_menu_mp(contato, opcoes_espessura, "espessura_materia_prima")
            global_state.status_usuario[contato] = "espessura_materia_prima"
            return

        # ‚úÖ Se a espessura j√° foi escolhida e for "Fixo", perguntar beneficiamento
        if "fixo" in definicao_1:
            beneficiamentos_disponiveis = (
                df_mp[
                    (df_mp["cor_materia_prima"].str.strip() == cor_mp) &
                    (df_mp["espessura_materia_prima"].str.strip() == informacoes_cliente.get("espessura_materia_prima", ""))
                ]["beneficiamento"]
                .dropna()
                .unique()
                .tolist()
            )

            logger.debug(f"üìã Beneficiamentos dispon√≠veis para fixo: {beneficiamentos_disponiveis}")

            if estado_atual == "espessura_materia_prima" and beneficiamentos_disponiveis:
                apresentar_menu_mp(contato, beneficiamentos_disponiveis, "beneficiamento")
                global_state.status_usuario[contato] = "beneficiamento"
                return

        # ‚úÖ Para qualquer outro projeto, definir beneficiamento TEMPERADO e avan√ßar
        informacoes_cliente["beneficiamento"] = "TEMPERADO"
        logger.info(f"‚öôÔ∏è Beneficiamento definido automaticamente como TEMPERADO para {contato}")

        # Finaliza a sele√ß√£o de mat√©ria-prima e segue o fluxo
        finalizar_selecao_mp(contato, informacoes_cliente)

    except ValueError:
        enviar_mensagem(contato, "Op√ß√£o inv√°lida. Por favor, escolha uma das op√ß√µes listadas abaixo:")
        repetir_menu(contato, "Bot")


def finalizar_selecao_mp(contato, informacoes_cliente):
    """
    Finaliza a sele√ß√£o de mat√©ria-prima e continua para a pr√≥xima etapa.
    """
    materia_prima = informacoes_cliente.get("cor_materia_prima", "Mat√©ria-prima n√£o definida")
    espessura = informacoes_cliente.get("espessura_materia_prima", "Espessura n√£o definida")
    beneficiamento = informacoes_cliente.get("beneficiamento", "Beneficiamento n√£o definido")
    altura = informacoes_cliente.get("altura")
    largura = informacoes_cliente.get("largura")

    if not altura or not largura:
        enviar_mensagem(contato, "‚ùå Erro interno: Altura ou largura n√£o definida. Reinicie o processo.")
        return

    # Obter a f√≥rmula do projeto escolhido
    projeto = informacoes_cliente.get("projeto_escolhido", {})
    id_formula = projeto.get("id_formula")

    if not id_formula:
        enviar_mensagem(contato, "‚ùå Erro interno: F√≥rmula do projeto n√£o encontrada. Reinicie o processo.")
        return

    # **Usar calcular_pecas do formula_service.py**
    pecas = calcular_pecas(id_formula, altura, largura)

    if not pecas:
        enviar_mensagem(contato, "‚ùå Erro ao calcular as pe√ßas. Tente novamente.")
        return

    # **Salvar as pe√ßas calculadas**
    informacoes_cliente["pecas"] = pecas
    global_state.informacoes_cliente[contato] = informacoes_cliente

    # Exibir o resumo da sele√ß√£o
    enviar_mensagem(
        contato,
        f"‚úÖ Mat√©ria-prima escolhida: {materia_prima}, {espessura}, {beneficiamento}."
    )

    # Exibir as pe√ßas calculadas
    msg_pecas = "üìè Pe√ßas calculadas:\n"
    for peca in pecas:
        msg_pecas += f"{peca['quantidade']}x {peca['nome_peca']}: {peca['dimensoes'][0]}mm x {peca['dimensoes'][1]}mm\n"

    enviar_mensagem(contato, msg_pecas)

    # Pedir a quantidade ao usu√°rio
    enviar_mensagem(contato, "Quantas unidades desse projeto voc√™ deseja?")
    global_state.status_usuario[contato] = "aguardando_quantidade"


def processar_quantidade(contato, texto):
    """
    Processa a quantidade informada e ajusta as pe√ßas calculadas.
    """
    try:
        quantidade = int(texto)
        dados_usuario = global_state.informacoes_cliente.get(contato, {})
        projeto = dados_usuario["projeto_escolhido"]
        descricao_projeto = projeto.get("descricao_projeto", "Projeto sem descri√ß√£o.")
        id_formula = projeto.get("id_formula", 0)

        if id_formula == 0:
            enviar_mensagem(contato, "‚ùå Erro interno: F√≥rmula n√£o encontrada para este projeto.")
            return

        # Recuperar pe√ßas calculadas com base na f√≥rmula
        altura = dados_usuario.get("altura", 0)
        largura = dados_usuario.get("largura", 0)
        pecas = calcular_pecas(id_formula, altura, largura)

        if not pecas:
            enviar_mensagem(contato, "‚ùå Erro ao calcular as pe√ßas. Tente novamente.")
            return

        # Ajustar a quantidade de cada pe√ßa multiplicando pelo valor informado
        pecas_multiplicadas = []
        for peca in pecas:
            pecas_multiplicadas.append({
                "nome_peca": peca["nome_peca"],
                "quantidade": peca["quantidade"] * quantidade,  # Multiplica pela quantidade total
                "dimensoes": peca["dimensoes"]
            })

        # Salvar no estado global
        dados_usuario["pecas"] = pecas_multiplicadas
        dados_usuario["quantidade_total"] = quantidade  # Salva a quantidade total no estado global
        global_state.informacoes_cliente[contato] = dados_usuario

        # Exibir resumo das pe√ßas calculadas
        msg_pecas = f"üì¶ Para {quantidade} unidades do item {descricao_projeto}, voc√™ precisar√° de:\n"
        for peca in pecas_multiplicadas:
            msg_pecas += f"\n{peca['quantidade']}x {peca['nome_peca']}: {peca['dimensoes'][0]}mm x {peca['dimensoes'][1]}mm"

        enviar_mensagem(contato, msg_pecas)
        salvar_mensagem_em_arquivo(contato, descricao_projeto, msg_pecas)

        # Passa para salvar as pe√ßas no pedido
        adicionar_pecas_pedido(contato, dados_usuario.get("nome_cliente", "Cliente"))

    except ValueError:
        enviar_mensagem(contato, "‚ùå Quantidade inv√°lida! Digite um n√∫mero inteiro.")


def repetir_menu(contato, nome_cliente):
    """
    Reenvia o menu apropriado com base no estado atual do usu√°rio.
    """
    status = global_state.status_usuario.get(contato)
    ultimo_menu = global_state.ultimo_menu_usuario.get(contato)

    if ultimo_menu:
        enviar_mensagem(contato, "Por favor, escolha uma das op√ß√µes listadas abaixo:")
        enviar_mensagem(contato, "\n".join([f"{i + 1}. {opcao}" for i, opcao in enumerate(ultimo_menu)]))
        salvar_mensagem_em_arquivo(contato, nome_cliente, f"Bot: Repetiu o menu para o estado '{status}'.")
    else:
        enviar_mensagem(contato, "Conversa encerrada por inatividade. Para reiniciar, envie qualquer mensagem.")
        salvar_mensagem_em_arquivo(contato, nome_cliente, "Bot: Conversa encerrada por inatividade.")
        global_state.limpar_dados_usuario(contato)


def adicionar_pecas_pedido(contato, nome_cliente):
    """
    Acumula os pedidos no estado global e garante que o id_cliente seja correto.
    """
    dados_usuario = global_state.informacoes_cliente.get(contato, {})

    # Buscar o cliente pelo telefone
    cliente_info = ClienteCache.buscar_cliente_por_telefone(contato)
    if not cliente_info:
        logger.error(f"‚ùå Cliente n√£o encontrado para o n√∫mero {contato}.")
        enviar_mensagem(contato, "‚ùå Erro interno: Cliente n√£o encontrado. Tente novamente.")
        return

    id_cliente = cliente_info["id_cliente"]
    nome_cliente = cliente_info["nome_cliente"]

    # Atualizar o estado do cliente com as informa√ß√µes corretas
    dados_usuario["id_cliente"] = id_cliente
    dados_usuario["nome_cliente"] = nome_cliente

    # Continuar o processamento normalmente
    pedidos_acumulados = dados_usuario.get("pedidos", [])
    id_materia_prima, valor_mp_m2 = buscar_materia_prima(dados_usuario)

    if not id_materia_prima or not valor_mp_m2:
        enviar_mensagem(contato, "‚ùå Erro: N√£o foi poss√≠vel identificar a mat√©ria-prima. Tente novamente.")
        return

    pecas_calculadas = dados_usuario.get("pecas", [])
    novo_pedido = {
        "id_cliente": id_cliente,
        "nome_cliente": nome_cliente,  # Nome atualizado
        "id_projeto": dados_usuario.get("projeto_escolhido", {}).get("id_projeto"),
        "id_materia_prima": id_materia_prima,
        "valor_mp_m2": valor_mp_m2,
        "pecas": pecas_calculadas,
        "altura_vao": dados_usuario.get("altura"),
        "largura_vao": dados_usuario.get("largura"),
    }

    pedidos_acumulados.append(novo_pedido)
    dados_usuario["pedidos"] = pedidos_acumulados
    global_state.informacoes_cliente[contato] = dados_usuario

    perguntar_se_finalizou(contato)


def processar_resposta_adicionar_pecas(contato, texto):
    """
    Processa a resposta do usu√°rio sobre adicionar mais pe√ßas ou finalizar o pedido.
    Agora mant√©m os pedidos acumulados corretamente.
    """
    texto = texto.strip()

    if texto == "1":  # Cliente quer adicionar mais pe√ßas
        enviar_mensagem(contato, "üîÑ Redirecionando para adicionar mais pe√ßas...")

        # ‚úÖ Manter os pedidos j√° feitos e limpar apenas as informa√ß√µes do novo projeto
        dados_usuario = global_state.informacoes_cliente.get(contato, {})
        pedidos_acumulados = dados_usuario.get("pedidos", [])

        global_state.informacoes_cliente[contato] = {"pedidos": pedidos_acumulados}  # Mant√©m os pedidos
        perguntar_tipo_medida(contato, global_state.informacoes_cliente[contato].get("nome_cliente", "Cliente"))

    elif texto == "2":  # Cliente quer finalizar o pedido
        enviar_mensagem(contato, "‚úÖ Antes de finalizar, qual nome deseja dar para este pedido?")
        global_state.status_usuario[contato] = "aguardando_nome_pedido"

    else:
        enviar_mensagem(contato, "‚ùå Op√ß√£o inv√°lida. Escolha:\n1Ô∏è‚É£ Adicionar mais pe√ßas\n2Ô∏è‚É£ Finalizar pedido.")


def perguntar_se_finalizou(contato):
    """
    Pergunta ao usu√°rio se deseja continuar adicionando mais pe√ßas ou finalizar o pedido.
    """
    enviar_mensagem(contato, "Deseja adicionar mais pe√ßas ao pedido?")
    enviar_mensagem(contato, "1Ô∏è‚É£ Sim\n2Ô∏è‚É£ N√£o, finalizar pedido.")

    # Atualiza o estado do usu√°rio para esperar a resposta
    global_state.status_usuario[contato] = "aguardando_resposta_adicionar"


def processar_resposta_finalizou(contato, texto):
    """
    Antes de finalizar, gera um resumo do pedido e pede autoriza√ß√£o para produ√ß√£o.
    Se o cliente confirmar, o pedido ser√° salvo corretamente com status 'AUTORIZADO'.
    Caso contr√°rio, ser√° mantido como 'OR√áAMENTO' ou 'CANCELADO'.
    """
    dados_usuario = global_state.informacoes_cliente.get(contato, {})
    nome_pedido = str(texto.strip())

    if not nome_pedido:
        enviar_mensagem(contato, "‚ùå Nome inv√°lido. Por favor, digite um nome para o pedido.")
        return

    pedidos_acumulados = dados_usuario.get("pedidos", [])
    if not pedidos_acumulados:
        enviar_mensagem(contato, "‚ùå Nenhum pedido encontrado para salvar. Reinicie o processo.")
        return

    id_cliente = dados_usuario.get("id_cliente")
    if not id_cliente:
        enviar_mensagem(contato, "‚ùå Erro interno: ID do cliente n√£o encontrado.")
        return

    resumo_pedido = f"üìù *Resumo do Pedido: {nome_pedido}*\n"
    total_geral = 0
    total_m2 = 0
    total_pecas = 0

    for pedido in pedidos_acumulados:
        nome_projeto = obter_nome_projeto(pedido["id_projeto"])
        nome_mp = obter_nome_materia_prima(pedido["id_materia_prima"])
        pecas_calculadas, valor_total = calcular_valores_pecas(pedido["pecas"], pedido["valor_mp_m2"])
        total_geral += valor_total

        resumo_pedido += f"*‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚ñ∫‚óÑ‚óÑ‚óÑ‚óÑ‚óÑ‚óÑ‚óÑ‚óÑ‚óÑ*\n"
        resumo_pedido += f"üìå *Projeto:* {nome_projeto}\n"
        resumo_pedido += f"üîπ *Mat√©ria-prima:* {nome_mp}\n"
        resumo_pedido += f"üí∞ *Valor por m¬≤:* R${pedido['valor_mp_m2']:.2f}\n"
        resumo_pedido += f"üè¢ *Quantidade de Projetos:* {dados_usuario.get('quantidade_total', 1)}\n\n"

        for peca in pecas_calculadas:
            resumo_pedido += f"üî∏ {peca['quantidade']}x {peca['descricao_peca']} - {peca['altura_peca']}mm x {peca['largura_peca']}mm\n"
            resumo_pedido += f"üìè √Årea: {peca['area_m2']}m¬≤ | üí∞ Valor: R${peca['valor_total']:.2f}\n"
            total_m2 += peca["area_m2"]
            total_pecas += peca["quantidade"]

    resumo_pedido += f"*=========================*\n"
    resumo_pedido += f"üìè *√Årea total:* {total_m2:.2f}m¬≤\n"
    resumo_pedido += f"üè¢ *Quantidade total de pe√ßas:* {total_pecas}\n"
    resumo_pedido += f"üí∞ *Valor total do pedido:* R${total_geral:.2f}\n"
    resumo_pedido += f"*=========================*\n"

    # üîπ NOVO: Perguntar sobre autoriza√ß√£o corretamente
    enviar_mensagem(contato, resumo_pedido)
    enviar_mensagem(contato, "üìå Pedido salvo como OR√áAMENTO.")
    enviar_mensagem(contato, "Autoriza a produ√ß√£o do pedido acima?")
    enviar_mensagem(contato, "1Ô∏è‚É£ Sim, autorizar produ√ß√£o\n2Ô∏è‚É£ N√£o, manter como or√ßamento\n3Ô∏è‚É£ Cancelar pedido")

    # Atualiza o estado para aguardar a decis√£o final do usu√°rio
    global_state.status_usuario[contato] = "aguardando_autorizacao"
    global_state.informacoes_cliente[contato]["nome_pedido"] = nome_pedido

    # Atualiza o estado para aguardar a decis√£o final do usu√°rio
    global_state.status_usuario[contato] = "aguardando_confirmacao_pedido"
    global_state.informacoes_cliente[contato]["nome_pedido"] = nome_pedido


def processar_resposta_autorizacao(contato, texto):
    """
    Processa a resposta do usu√°rio sobre autorizar, manter como or√ßamento ou cancelar.
    """
    dados_usuario = global_state.informacoes_cliente.get(contato, {})
    id_pedido = dados_usuario.get("id_pedido", "")
    nome_pedido = dados_usuario.get("nome_pedido", "")

    if not nome_pedido or not id_pedido:
        enviar_mensagem(contato, "‚ùå Erro interno: Pedido n√£o encontrado.")
        return

    if texto == "1":
        atualizar_status_pedido(nome_pedido, "AUTORIZADO")
        mensagem_final = f"‚úÖ Pedido **{nome_pedido}** foi AUTORIZADO para produ√ß√£o! üè≠"
    elif texto == "2":
        atualizar_status_pedido(nome_pedido, "OR√áAMENTO")
        mensagem_final = f"üìã Pedido **{nome_pedido}** foi mantido como OR√áAMENTO. Voc√™ pode acess√°-lo depois."
    elif texto == "3":
        atualizar_status_pedido(nome_pedido, "CANCELADO")
        mensagem_final = f"üö´ Pedido **{nome_pedido}** foi CANCELADO."
    else:
        enviar_mensagem(contato, "‚ùå Op√ß√£o inv√°lida. Escolha uma das op√ß√µes do menu.")
        return

    enviar_mensagem(contato, mensagem_final)
    global_state.limpar_dados_usuario(contato)



def processar_confirmacao_pedido(contato, texto):
    """
    Processa a confirma√ß√£o do usu√°rio ap√≥s exibir o resumo do pedido.
    Se for autorizado ou mantido como or√ßamento, salva as pe√ßas corretamente.
    """
    texto = texto.strip()

    if texto not in ["1", "2", "3"]:
        enviar_mensagem(contato, "‚ùå Op√ß√£o inv√°lida. Escolha:\n1Ô∏è‚É£ Sim, autorizar produ√ß√£o\n2Ô∏è‚É£ N√£o, manter como or√ßamento\n3Ô∏è‚É£ Cancelar pedido")
        return

    dados_usuario = global_state.informacoes_cliente.get(contato, {})
    nome_pedido = dados_usuario.get("nome_pedido")

    if not nome_pedido:
        enviar_mensagem(contato, "‚ùå Erro interno: Nome do pedido n√£o encontrado.")
        return

    pedidos_acumulados = dados_usuario.get("pedidos", [])
    if not pedidos_acumulados:
        enviar_mensagem(contato, "‚ùå Nenhum pedido encontrado para salvar.")
        return

    id_cliente = dados_usuario.get("id_cliente")
    if not id_cliente:
        enviar_mensagem(contato, "‚ùå Erro interno: ID do cliente n√£o encontrado.")
        return

    if texto in ["1", "2"]:  # Autorizar produ√ß√£o ou manter como or√ßamento
        status_final = "AUTORIZADO" if texto == "1" else "OR√áAMENTO"

        for pedido in pedidos_acumulados:
            logger.debug(f"üìù Salvando pedido: {pedido}")  
            logger.debug(f"üì¶ Pe√ßas recebidas para salvar: {pedido.get('pecas', [])}")

            salvar_pedido(
                id_cliente=id_cliente,
                nome_cliente=pedido.get("nome_cliente", "Cliente Desconhecido"),
                id_projeto=pedido.get("id_projeto"),
                id_materia_prima=pedido.get("id_materia_prima"),
                altura_vao=pedido.get("altura_vao"),
                largura_vao=pedido.get("largura_vao"),
                pecas_calculadas=pedido.get("pecas", []),
                valor_mp_m2=pedido.get("valor_mp_m2", 0.0),
                nome_pedido=nome_pedido
            )

        atualizar_status_pedido(nome_pedido, status_final)

        if texto == "1":
            mensagem_final = f"‚úÖ Pedido **{nome_pedido}** foi AUTORIZADO para produ√ß√£o! üè≠"
        else:
            mensagem_final = f"üìã Pedido **{nome_pedido}** foi mantido como OR√áAMENTO. Voc√™ pode acess√°-lo depois."

    elif texto == "3":  # Cliente cancela o pedido
        atualizar_status_pedido(nome_pedido, "CANCELADO")
        mensagem_final = f"üö´ Pedido **{nome_pedido}** foi CANCELADO. Caso precise, pode criar um novo or√ßamento."

    enviar_mensagem(contato, mensagem_final)

    # Limpar os dados do usu√°rio ap√≥s o processamento
    global_state.limpar_dados_usuario(contato)


def finalizar_conversa(contato, nome_cliente):
    """
    Finaliza a conversa e limpa os dados do usu√°rio do estado global.
    """
    enviar_mensagem(contato, "Obrigado! Caso precise de algo, estamos √† disposi√ß√£o! üòä")
    salvar_mensagem_em_arquivo(contato, nome_cliente, "Bot: Conversa encerrada.")
    global_state.limpar_dados_usuario(contato)
    